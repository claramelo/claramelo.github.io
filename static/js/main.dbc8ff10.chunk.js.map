{"version":3,"sources":["static/image/profile.jpg","molecules/ProfileHeader/ProfileHeader.styled.js","atoms/Icon/Icon.styled.js","atoms/Icon/Icon.jsx","molecules/ProfileHeader/ProfileHeader.jsx","helpers/globalCss.styled.js","App.styled.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProfileHeaderContainer","styled","div","_templateObject","ProfileName","h1","_templateObject2","IconContainer","img","Icon_styled_templateObject","Icon","props","src","alt","react_default","a","createElement","ProfileHeader","generalInfo","image","name","GlobalCss","createGlobalStyle","globalCss_styled_templateObject","AppWipContainer","App_styled_templateObject","profileImage","App","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6cCExC,IAAMC,EAAyBC,IAAOC,IAAVC,KAKtBC,EAAcH,IAAOI,GAAVC,4MCLjB,IAAMC,EAAgBN,IAAOO,IAAVC,KCGnB,SAASC,EAAKC,GAAO,IACTC,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IACb,OACIC,EAAAC,EAAAC,cAACT,EAAD,CAAeK,IAAKA,EAAKC,IAAKA,ICEtC,SAASI,EAAcN,GAAO,IAClBO,EAAgBP,EAAhBO,YACR,OACIJ,EAAAC,EAAAC,cAAChB,EAAD,KACIc,EAAAC,EAAAC,cAACN,EAAD,CAAME,IAAKM,EAAYC,MAAON,IAAKK,EAAYE,OAC/CN,EAAAC,EAAAC,cAACZ,EAAD,KAAcc,EAAYE,4UCbtC,IAAMC,EAAYC,YAAHC,2ICAf,IAAMC,EAAkBvB,IAAOC,IAAVuB,aCKfP,EAAc,CAClBE,KAAM,+BACND,aAAOO,GAiBMC,mLAZX,OACEb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACEd,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACC,EAAD,CAAeC,YAAaA,IAC5BJ,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAAA,OAAKJ,IAAI,gEAAgEC,IAAI,iBAPrEgB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dbc8ff10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.a64a4f7d.jpg\";","import styled from 'styled-components';\n\nconst ProfileHeaderContainer = styled.div`\n    display: block;\n    text-align:center;\n\n`\nconst ProfileName = styled.h1`\n    color: #ffc0cb;\n    margin: 8px 0px;\n`;\n\nexport {\n    ProfileHeaderContainer,\n    ProfileName,\n};","import styled from 'styled-components';\n\nconst IconContainer = styled.img`\n    border: solid 4px;\n    border-radius: 50%;\n    border-color: white;\n    \n    max-width: 150px;\n    max-height: 150px;\n`;\n\nexport { IconContainer as default };\n\n","import React from 'react';\nimport { string } from 'prop-types';\n\nimport IconContainer from './Icon.styled';\n\nfunction Icon(props) {\n    const { src, alt } = props;\n    return (\n        <IconContainer src={src} alt={alt}/>\n    );\n}\n\nIcon.propTypes = {\n    src: string.isRequired,\n    alt: string.isRequired\n}\n\nexport { Icon as default };","import React from 'react';\nimport { string, shape} from 'prop-types';\n\nimport { \n    ProfileHeaderContainer,\n    ProfileName,\n} from './ProfileHeader.styled';\n\nimport Icon from '../../atoms/Icon';\n\nfunction ProfileHeader(props) {\n    const { generalInfo } = props;\n    return(\n        <ProfileHeaderContainer>\n            <Icon src={generalInfo.image} alt={generalInfo.name}/>\n            <ProfileName>{generalInfo.name}</ProfileName>\n        </ProfileHeaderContainer>\n    );\n}\n\nProfileHeader.propTypes = {\n    generalInfo: shape({\n        name: string.isRequired,\n        image: string.isRequired,\n    }).isRequired,\n}\n\nexport { ProfileHeader as default};","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalCss = createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css?family=Cabin');\n    \n    html {\n        font-family: 'Cabin', sans-serif;\n        background: url('https://media.giphy.com/media/FlodpfQUBSp20/giphy.gif');\n        background-repeat: repeat;\n    }\n`\n\nexport { GlobalCss as default};","import styled from 'styled-components';\n\nconst AppWipContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: auto;\n`;\n\nexport { AppWipContainer };","import React, { Component } from 'react';\nimport ProfileHeader from './molecules/ProfileHeader';\nimport GlobalCss from './helpers/globalCss.styled';\nimport { AppWipContainer } from './App.styled';\n\nimport profileImage from  './static/image/profile.jpg'\n\nconst generalInfo = {\n  name: \"Maria Clara Melo de Carvalho\",\n  image: profileImage,\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GlobalCss />\n        <ProfileHeader generalInfo={generalInfo}/>\n        <AppWipContainer>\n          <img src=\"https://thumbs.gfycat.com/ScaryMassiveGallowaycow-max-1mb.gif\" alt=\"wip\"/>\n        </AppWipContainer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}